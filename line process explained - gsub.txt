

account_type = self.class.to_s.gsub(/([A-Z])/) {|letter| letter = " " + letter.downcase}.sub(" ", "")

`account_type` is a local variable. It is going to be set to the outcome of the following computation.
So let's find out what it will be set to...
`self` refers to the object that we're using to execute this code.
`class` points self at the name of the class we're executing
`to_s` turns `self.class` into a string
`gsub` globally substitutes parts of the string based on character ranges within parentheses
`(/([A-Z])/)` does this:
    - outer parens contain the argument to the gsub function
    - forward slashes define the range for the substitution (a regular expression)
    - I'm not sure the inner parens are necessary for gsubs to a second-argument block
    - brackets contain the character range (in this case, capital letters A-Z)
Curly brackets start the block, which is the second argument to the method
    - inside the straight brackets, the local variable `letter` is made.
    - `letter` is then set to the computation following the equals sign (and inside the curlies)
    - the quotes start a string, which contains a space
    - `letter` is also downcased by the method downcase, and added to the string with the space
`.sub` receives the resulting string from **the gsub method** and substitutes for one (the first) instance of something
    - the string before the comma is substituted
    - it's a space, so it will replace an existing space (like the leading space)
    - and it will replace it with the string after the comma (which is blank in this case, causing that first space to disappear)